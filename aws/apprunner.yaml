# Create the App Runner service
# Took ideas from:
# * https://www.youtube.com/watch?v=ABvx7radhw4
# * https://github.com/aws-samples/aws-apprunner-netcore/blob/main/config/net-core-app-infra.yaml

Description: Create app runner service, pulling image from Private ECR

Parameters:
  BaseName:
    Type: String                # scale0
  OpEnv:
    Type: String                # dev, qa, prod
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  SecurityGroup:
    Type: String
  S3Name:
    Type: String
  # DatabaseUrl:
  #   Type: String
  DatabaseHost:
    Type: String
  DatabasePort:
    Type: String
  DatabaseName:
    Type: String
  DatabaseUser:
    Type: String
  DatabasePassword:
    Type: String


Resources:

  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${BaseName}-${OpEnv}-access-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [build.apprunner.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonAppRunnerExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'     # TODO narrow it to our ECR name, and to logGroups/logStreams

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${BaseName}-${OpEnv}-instance-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess # talk to RDS Aurora Serverless v1
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess 
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [tasks.apprunner.amazonaws.com]
          Action: ['sts:AssumeRole'] 
      Path: /
      Policies:
      - PolicyName: net-core-instance-role-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'       # media and assets
              - 's3:PutObject*' # store uploaded media
            Resource: '*'       # TODO we don't yet store assets/media in S3 but we will

  VpcConnector:                 # Needed to access RDS in VPC
    Type: AWS::AppRunner::VpcConnector
    Properties:
      SecurityGroups: # default uses VPC default SG which allows all outbound
        - !Ref SecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      # 1. You cannot create the same-named connector again.
      # 2. If you create a new connector with same SGs it will also fail!
      VpcConnectorName: !Sub ${BaseName}

  Service:
    Type: AWS::AppRunner::Service
    Properties:
      InstanceConfiguration:
        InstanceRoleArn: !GetAtt InstanceRole.Arn
      NetworkConfiguration:      # Needed for RDS in VPC
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !GetAtt VpcConnector.VpcConnectorArn
      ServiceName: !Sub ${BaseName}-${OpEnv}
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AccessRole.Arn
        AutoDeploymentsEnabled: true  # pulls new images from ECR
        ImageRepository:
          ImageConfiguration:
            Port: 8000
            RuntimeEnvironmentVariables:
              # - Name: DATABASE_URL
              #   Value: !Ref DatabaseUrl
              - Name: DATABASE_HOST
                Value: !Ref DatabaseHost
              - Name: DATABASE_PORT
                Value: !Ref DatabasePort
              - Name: DATABASE_NAME
                Value: !Ref DatabaseName
              - Name: DATABASE_USER
                Value: !Ref DatabaseUser
              - Name: DATABASE_PASSWORD
                Value: !Ref DatabasePassword
              - Name: AWS_STORAGE_BUCKET_NAME # for Django Storages
                Value: !Ref S3Name
          ImageIdentifier: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BaseName}:${OpEnv}
          #ImageIdentifier: ZZZZ.dkr.ecr.us-east-1.amazonaws.com/scale0:dev
          ImageRepositoryType: ECR
      # AutoScalingConfigurationArn: str ARN
      # EncryptionConfigureation: object
      # HealthCheckConfiguration: obj
      # ObservabilityConfiguration: 
      # Tags

Outputs:
  Url:
    Description: The HTTP endpoint of the service but we need HTTPS to access it
    Value: !GetAtt Service.ServiceUrl

