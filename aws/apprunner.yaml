# Create the App Runner service
# aws cloudformation deploy --template-file apprunner.yaml  --stack-name wagrun --capabilities CAPABILITY_NAMED_IAM

# Took ideas from:
# * https://www.youtube.com/watch?v=ABvx7radhw4
# * https://github.com/aws-samples/aws-apprunner-netcore/blob/main/config/net-core-app-infra.yaml


Description: Create app runner service, pulling image from Private ECR

Parameters:
  ServiceName:
    Type: String
    Default: wagrun
    Description: Name for your App Runner service
  VpcStack:
    Type: String
    Default: wagtail-apprunner-vpc

Resources:

  ServiceAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-service-access-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [build.apprunner.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonAppRunnerExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  VpcConnector:                 # Needed to access RDS in VPC
    Type: AWS::AppRunner::VpcConnector
    Properties:
      # default uses VPC default SG which allows all outbound
      SecurityGroups:
        - Fn::ImportValue:
            Fn::Sub: ${VpcStack}-NoIngressSecurityGroup
      Subnets:
        # !Split [',' {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPublic}] #??
        - Fn::ImportValue:
            Fn::Sub: ${VpcStack}-PublicSubnet1
        - Fn::ImportValue:
            Fn::Sub: ${VpcStack}-PublicSubnet2
      # Tags: 
      #   - Tag
      # Constraint failed for name, why? fix later
      #VpcConnectorName: "${AWS::StackName}-vpc-connector"
      VpcConnectorName: vpc-connector

  # AppRunnerInstanceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${AppStackName}-instance-role
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonRDSFullAccess 
  #       - arn:aws:iam::aws:policy/AmazonSSMFullAccess 
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: [tasks.apprunner.amazonaws.com]
  #         Action: ['sts:AssumeRole'] 
  #     Path: /
  #     Policies:
  #     - PolicyName: net-core-instance-role-policy
  #       PolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #             - 's3:get*'
  #           Resource: '*'



  Service:
    Metadata:
      'aws:apprunner:description': 'hello-app-runner example service'
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Ref ServiceName
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt ServiceAccessRole.Arn
        AutoDeploymentsEnabled: true  # true works for source code; images too??
        ImageRepository:
          ImageConfiguration:
            Port: 8000
          ImageIdentifier: 355255540862.dkr.ecr.us-east-1.amazonaws.com/wagrun:latest
          ImageRepositoryType: ECR
      NetworkConfiguration:      # Needed for RDS in VPC
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !GetAtt VpcConnector.VpcConnectorArn
      # AutoScalingConfigurationArn: str
      # EncryptionConfigureation: object
      # HealthCheckConfiguration: obj
      # InstanceConfiguration: obj -- InstanceRoleArn: for IAM Role to ... talk to RDS? ECR?
      # ObservabilityConfiguration: 
      # Tags

Outputs:
  Url:
    Description: The HTTP endpoint of the service
    Value: !GetAtt Service.ServiceUrl
