# Don't create ECR here but externally so it can be used by all
# environments: dev, qa, prod. This will avoid chicken versus egg
# where CloudFormation creates ECR but then its Apprunner can't find
# an image yet so it rolls everything back to zero.

Parameters:
  # BaseName and OpEnv are used to tag images in the repo, like .../scale0:dev
  BaseName:
    Type: String
    Default: scale0
  OpEnv:
    Type: String
    Default: dev


Resources:
  Vpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: vpc.yaml

  S3:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: s3.yaml

  Db:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: db.yaml
      Parameters:
        PublicSubnet1:  !GetAtt Vpc.Outputs.PublicSubnet1
        PublicSubnet2:  !GetAtt Vpc.Outputs.PublicSubnet2
        SecurityGroup:  !GetAtt Vpc.Outputs.SecurityGroupDb
        DatabaseName:   !Sub ${BaseName}${OpEnv} # only alphanumerics, no dashes

  AppRunner:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: apprunner.yaml
      Parameters:
        BaseName:         !Ref BaseName
        OpEnv:            !Ref OpEnv
        PublicSubnet1:    !GetAtt Vpc.Outputs.PublicSubnet1
        PublicSubnet2:    !GetAtt Vpc.Outputs.PublicSubnet2
        SecurityGroup:    !GetAtt Vpc.Outputs.SecurityGroupAppRunner
        S3Name:           !GetAtt S3.Outputs.Name
        DatabaseUrl:      !Sub "postgres://${Db.Outputs.DatabaseUser}:${Db.Outputs.DatabasePassword}@${Db.Outputs.Host}:${Db.Outputs.Port}/${Db.Outputs.Name}"
